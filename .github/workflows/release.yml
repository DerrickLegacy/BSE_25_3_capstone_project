name: 🚀 Automated Version Release

on:
  push:
    branches: ['main'] # Actual releases
  pull_request:
    branches: ['main'] # Dry-run only on PRs

jobs:
  release:
    name: Run Semantic Release
    runs-on: ubuntu-latest

    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      # --- Step 0: Checkout code ---
      - name: 🧾 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-release to read tags/history

      # --- Step 1: Setup Node.js ---
      - name: 🧩 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      # --- Step 2: Install dependencies ---
      - name: 📦 Install Dependencies
        run: npm ci

      # --- Step 3: Dry-run on PRs ---
      - name: 🔍 Dry-run Semantic Release (PRs)
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running semantic-release dry-run for PR..."
          npx semantic-release --dry-run > release_output.txt
          cat release_output.txt

      # --- Step 4: Actual release on main pushes ---
      - name: 🚀 Perform Release (main branch)
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running semantic-release on main branch..."

          # --- Step 4a: Run semantic-release to create tag & GitHub release ---
          npx semantic-release

          # --- Step 4b: Get the latest released version (tag) ---
          LATEST_TAG=$(git describe --tags --abbrev=0)
          DATE=$(date)
          SHORT_COMMIT=$(git rev-parse --short HEAD)

          echo "Latest released version: $LATEST_TAG"

          # --- Step 4c: Append to version.js (history) ---
          echo "// Version: ${LATEST_TAG} - Commit: ${SHORT_COMMIT} - ${DATE}" >> version.js
          echo "console.log('Version ${LATEST_TAG} (${SHORT_COMMIT}) released on ${DATE}');" >> version.js

          # --- Step 4d: Update frontend version.json ---
          echo "{ \"version\": \"${LATEST_TAG}\", \"commit\": \"${SHORT_COMMIT}\", \"date\": \"${DATE}\" }" > client/public/version.json

          # --- Step 4e: Commit updated version files ---
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add version.js client/public/version.json
          git commit -m "chore: record release ${LATEST_TAG} [skip ci]" || echo "No changes to commit"
          git push origin HEAD:main
